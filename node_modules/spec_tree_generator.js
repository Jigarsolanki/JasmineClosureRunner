var sys = require('sys'),
  events = require('events'),
  walk = require('walk');

SpecTreeGenerator = function() {
  events.EventEmitter.call(this);
};
sys.inherits(SpecTreeGenerator, events.EventEmitter);

SpecTreeGenerator.prototype.generate = function (path) {

  var walker, tree, baselimit;


  path = path.lastIndexOf('/') === (path.length - 1) ?
  path.substring(0, path.length - 1): path;
  baselimit = path.lastIndexOf('/') + 1;
  tree = {};
  jsonRoot = path.substring(baselimit);
  tree[jsonRoot] = {};

  getTreeRoot = function(currentPath) {

    var treeRoot;

    if(currentPath === path) {
      return tree[path];
    } else {
      var paths = currentPath.split('/');
      treeRoot = tree;
      for(var i =0; i < paths.length; i++) {
        treeRoot = treeRoot[paths[i]];
      }
      return treeRoot;
    }
  };

  walker = walk.walk(path, { followLinks: false });
  walker.on("directories", function (root, dirStatsArray, next) {
    var treeRoot;
    treeRoot = getTreeRoot(root.substring(baselimit));
    for(var i=0; i< dirStatsArray.length; i++) {
      treeRoot[dirStatsArray[i].name] = {};
    }
    next();
  });

  walker.on('end', function() {
    this.emit('finished', tree);
  });

  return walker;
};

exports.SpecTreeGenerator = SpecTreeGenerator;
